name: CI #수행결과 확인할때 헷갈리지 않게 서비스명 적읍시다
on:
  push:
    branches: [main]
  pull_request:
    #action 파일은 레포지토리 디렉토리 최상단에만 위치해있어야하기 때문에 작업 수행할 path 지정
    branches: [main] #예시엔 main으로 되어있지만, 각각 서비스에 해당하는 브랜치로 정의

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # GitHub Action은 해당 프로젝트가 만들어진 환경에서 checkout하고 나거 실행한다.
      - uses: actions/checkout@v3

      # Node.js 위에서 실행하겠다고 명시한다.
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.2
        with:
          node-version: lts/Hydrogen
          cache: 'pnpm'

      # pnpm 설치
      - name: Install pnpm
        run: npm install -g pnpm

      # 해당 프로젝트의 node_modules에 변화가 있을 때마다 pnpm install을 해준다.
      # GitHub Actions는 이미 pnpm을 캐싱 옵션으로 지원하기 때문에 별도의 캐싱 스텝은 필요 없다.
      - name: Install Dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      # 해당 프로젝트의 node_modules에 변화가 있을 때마다 npm install을 해준다.
      - name: Cache node modules
        uses: actions/cache@v2.1.8

        # 해당 step을 대표하는 id를 설정할 수도 있다. 해당 값은 뒤의 step에서 사용한다.
        id: cache
        with:
          # node_modules라는 폴더를 검사하여
          path: node_modules
          # 아래 키값으로 cache가 돼있는지 확인한다.
          key: pnpm-packages-${{ hashFiles('**/package-lock.json') }}

      # 위 step에서 node_modules에 대한 cache 검사를 했다.
      # 모듈에 변화가 있다면 npm i를 실행하고 아니면 해당 step을 건너뛴다.
      # 위 스텝에서 정한 cache를 steps.cache로 가져와서 true가 아닐때만 npm i를 실행한다.
      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install
      - name: Build
        run: pnpm build

      # Docker에 연결하여 이미지를 빌드하고 Hub에 푸시한다.
      - name: 도커 이미지 빌드
        run: docker build -t potatoj1n/potatoni_form . #도커허브아이디/서비스명으로 정의

      - name: 도커 허브 로그인
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_ID }} #레포지토리 시크릿 키값에 도커허브 아이디
          password: ${{ secrets.DOCKER_TOKEN }} #이전에 발급한 토큰값

      - name: 도커 퍼블리싱
        run: docker push potatoj1n/potatoni_form #빌드한 이미지 도커허브에 push

      - name: ec2 접속 및 애플리케이션 실행
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }} #배포할 인스턴스 ip
          username: ubuntu #인스턴스 기본 username(ubuntu), 혹시 다른걸로 지정하셨으면 그걸로 쓰시면됩니다
          key: ${{ secrets.EC2_PEM_KEY }} #인스턴스 생성 시 발급받은 키페어(아래에 pem파일로 변환하는 방법 링크)
          port: 22
          script: | #서버 셸스크립트 명령어 실행
            echo "${{ secrets.DEFAULT_CONFIG }}" | base64 --decode > /home/ubuntu/conf/conf.d/default.conf
            sudo docker stop $(sudo docker ps -a -q)     #실행중인 컨테이너 중지
            sudo docker rm $(sudo docker ps -a -q)       # 삭제
            sudo docker pull potatoj1n/potatoni_form      # 도커허브에서 이미지 최신버전 가져오기
            sudo docker run -d -p 80:80 potatoj1n/potatoni_form     #이미지 사용해 컨테이너 실행(포트번호 주의)
